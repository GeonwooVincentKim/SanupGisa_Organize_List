I. 애플리케이션 설계

1. 소프트웨어 생명 주기

- i. 폭포수 모형 - 결과 철저하게 검토하여 승인 과정 거친 후, 다음 단계로 진행
    - 1. 가장 오래되고 폭넓게 사용 -> 고전적 생명 주기 모형
    - 2. 제품의 일부가 될 메뉴얼 작성
    - 3. 두 개 이상의 과정이 병행하여 수행되지 않음

- ii. 프로토타입 모형 - 최종 결과물을 예측하는 모형 --> 시제품 미리 제작
    - 1. 사용자와 시스템 사이의 인터페이스
    - 2. 시스템 모형 만드는 과정, 요구된 소프트웨어를 구현 -> 구현 단계에서 사용될 골격 코드가 됨
    - 3. 폭포수 모형 단점 보완

- iii. 나선형 모형 - 보헴 제안, 폭포수 + 프로토타입 + 위험 분석 기능
    - 1. 여러 번의 개발 과정을 거쳐 점진적으로 완벽한 최종 소프트웨어 개발 -> 점진적 모형
    - 2. 위험 관리 & 최소화
    - 3. 누락 or 추가 된 요구사항 첨가 -> 정밀 & 유지보수 과정 필요 없음

- iv. 애자일 모형 - 요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복
    - 1. 고객과의 소통
    - 2. 기업 활동
    - 3. Sprint or Iteration -> 짧은 개발 주기 & 고객의 평가와 요구
    - 4. 소규모 프로젝트 & 고도로 숙련된 개발자 & 급변하는 요구사항
    - 5. 스크럼, XP, 칸반, Lean, Crystal, ASD, FDD(기능 중심 개발), DSDM, DAD


2. 소프트웨어 개발 방법론

- i. 개요
    - 1. 목적 - 소프트웨어의 생산성과 품질 향상
    - 2. 개요 - 각종 기법 & 도구 체계적으로 정리하여 표준화

- ii. 구조적 방법론
    - 1. 정형화된 분석 절차 & 문서화 -> 구조적 방법론
    - 2. 분할과 정복 원리 적용

- iii. 정보공학 방법론
    - 1. 자료 중심 방법론 -> 정보 공학 방법론
    - 2. 대규모 정보 시스템 구축

- iv. 객체지향 방법론
    - 1. 현실 세계의 Entity (개체) 를 하나의 Object (객체) 로 제작 -> 객체지향 방법론
    - 2. Object, Class, Message
    - 3. 캡슐화, 정보 은닉, 추상화, 상속성, 다형성

- v. 컴포넌트 기반
    - 1. 컴포넌트 조합
    - 2. 컴포넌트 재사용
    - 3. 유지 보수 최소화
    - 4. 생산성 & 품질 향상

- vi. 애자일 방법론
    - 1. 소규모 프로젝트
    - 2. 일정한 반복 주기

- vi. 제품 계열 방법론
    - 1. 공통 기능 정의하여 개발 -> 제품 계열 방법론
    - 2. 임베디드 소프트웨어
    - 3. 영역 공학 -> 영역 분석, 영역 설계, 핵심 자산
    - 4. 응용 공학 -> 제품 요구 분석, 제품 설계, 제품 구현

3. Sprint (스프린트)

- i. 개요
    - 1. 제품 책임자 (PO) - 이해 관계자 -> 개발 의뢰자 or 사용자 -> BackLog 작성
    - 2. 스크럼 마스터 -> 조언자, 스크럼 회의 주관
    - 3. 개발팀 ->  개발자 & 디자이너 & 테스터 -- 7 ~ 8명

- ii. 개발 프로세스
    - 1. 제품 백로그
    - 2. Sprint 계획 회의
    - 3. Sprint
    - 4. 일일 스크럼 회의
    - 5. Sprint 검토 회의
    - 6. Sprint 회고

4. XP (eXtreme Programming)

- i. 개요
    - 1. 짧고 반복적인 개발 주기, 단순한 설계, 고객의 적극적인 참여
    - 2. Release 기간 짧게 반복 -> 고객 요구사항 반영에 대한 가시성 증대

- ii. 핵심 가치
    - 1. 의사소통
    - 2. 단순성
    - 3. 용기
    - 4. 존중
    - 5. 피드백

- iii. XP 개발 프로세스
    - 1. 사용자 스토리
    - 2. 릴리즈 계획 수립
    - 3. 스파이크
    - 4. 이터레이션
    - 5. 승인 검사
    - 6. 소규모 릴리즈

- iv. XP 주요 실천 방법
    - 1. Pair Programming -> 개발에 대한 공동 책임
    - 2. Collective Ownership (공동 코드 소유) -> 권한과 책임 공동 소유
    - 3. Test-Driven Development (테스트 주도 개발) -> 테스트 케이스 작성 & 자동화된 테스팅 도구
    - 4. Whole Team -> 각자 자신의 역할 & 역할에 대한 책임
    - 5. Continuous Integration -> 모듈 단위
    - 6. Design Improvement -> 유연성 강화 -> 시스템 재구성
    - 7. Small Release -> Release 기간 짧게 반복

II. 요구사항 정의

1. 요구사항 유형

- i. 기능 요구 사항
    - 1. 시스템 사항
    - 2. 시스템의 저장 방식 및 연산 수행 방식
    - 3. 시스템 필수 수행 기능
    - 4. 시스템을 통해 제공받기 원하는 기능

- ii. 비기능 요구 사항
    - 1. 시스템 장비 구성 -> 하드웨어, 소프트웨어, 네트워크
    - 2. 성능
    - 3. 인터페이스
    - 4. 데이터
    - 5. 테스트
    - 6. 보안
    - 7. 품질 -> 가용성, 정합성, 상호 보완성, 대응성, 신뢰성, 사용성, 유지 & 관리성, 이식성, 확장성, 보안성
    - 8. 제약사항
    - 9. 프로젝트 관리
    - 10. 프로젝트 지원

- iii. 사용자 요구 사항
